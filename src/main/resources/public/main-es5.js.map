{"version":3,"sources":["webpack:///src/app/http-interceptors/index.ts","webpack:///src/app/components/cart-details/cart-details.component.ts","webpack:///src/app/components/cart-details/cart-details.component.html","webpack:///src/app/common/order.ts","webpack:///src/environments/environment.ts","webpack:///src/app/common/purchase.ts","webpack:///src/app/common/user.ts","webpack:///src/app/services/product.service.ts","webpack:///src/app/services/luv2-shop-form.service.ts","webpack:///src/app/services/order-history.service.ts","webpack:///src/app/common/cart-item.ts","webpack:///src/app/http-interceptors/auth-interceptor.ts","webpack:///src/app/components/checkout/checkout.component.ts","webpack:///src/app/components/checkout/checkout.component.html","webpack:///src/app/components/search/search.component.ts","webpack:///src/app/components/search/search.component.html","webpack:///src/app/services/checkout.service.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/guards/auth.guard.ts","webpack:///src/app/common/product.ts","webpack:///src/app/common/order-item.ts","webpack:///src/app/components/cart-status/cart-status.component.ts","webpack:///src/app/components/cart-status/cart-status.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/product-category-menu/product-category-menu.component.html","webpack:///src/app/components/product-category-menu/product-category-menu.component.ts","webpack:///src/app/components/product-details/product-details.component.ts","webpack:///src/app/components/product-details/product-details.component.html","webpack:///src/app/components/product-list/product-list.component.ts","webpack:///src/app/components/product-list/product-list.component.html","webpack:///src/app/services/cart.service.ts","webpack:///src/app/components/success/success.component.ts","webpack:///src/app/components/success/success.component.html","webpack:///src/app/services/stripe-service.ts","webpack:///src/app/common/token.ts","webpack:///src/app/components/login-status/login-status.component.ts","webpack:///src/app/components/login-status/login-status.component.html","webpack:///src/app/services/auth.service.ts","webpack:///src/app/components/canceled/canceled.component.ts","webpack:///src/app/components/canceled/canceled.component.html","webpack:///src/app/components/orders/orders.component.html","webpack:///src/app/components/orders/orders.component.ts","webpack:///src/app/validators/luv2-shop-validators.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["httpInterceptorProviders","provide","useClass","multi","CartDetailsComponent","cartService","authService","stripeService","cartItems","totalPrice","totalQuantity","isAuthenticated","loading","guestPurchaseUrl","API_URL","getValue","subscribe","listCartDetails","purchase","orderItems","map","item","checkout","data","computeCartTotals","cartItem","addToCart","decrementQuantity","remove","Order","environment","production","STRIPE_KEY","Purchase","User","id","email","name","token","ProductService","httpClient","baseUrl","page","pageSize","categoryId","searchUrl","get","categoryUrl","keyword","productUrl","Luv2ShopFormService","countriesUrl","statesUrl","countryCode","OrderHistoryService","ordersUrl","errorMsg","handleError","error","next","message","pipe","CartItem","product","description","imageUrl","unitPrice","quantity","AuthInterceptor","request","authToken","authReq","clone","headers","set","handle","CheckoutComponent","formBuilder","luv2ShopFormService","checkoutService","countries","shippingAddressStates","billingAddressStates","storage","localStorage","purchaseUrl","getCustomerInfo","checkoutFormGroup","group","customer","firstName","required","minLength","notOnlyWhitespace","notOnlyWhitespaceWithOneLetter","lastName","shippingAddress","street","city","state","country","zipCode","billingAddress","startMonth","Date","getMonth","getCountries","_embedded","setCartTotals","invalid","markAllAsTouched","order","controls","value","shippingState","JSON","parse","stringify","shippingCountry","billingState","billingCountry","creditCardFormGroup","currentYear","getFullYear","selectedYear","Number","expirationYear","event","target","checkBox","checked","setValue","reset","formGroupName","formGroup","code","getStates","states","customerInfo","SearchComponent","router","navigateByUrl","doSearch","CheckoutService","post","url","AppComponent","title","AuthGuard","route","Product","OrderItem","productId","CartStatusComponent","updateCartStatus","routes","path","component","canActivate","redirectTo","pathMatch","AppModule","forRoot","useHash","ProductCategoryMenuComponent","productService","listProductCategories","getProductCategories","response","productCategories","productCategory","ProductDetailsComponent","location","paramMap","handleProductDetails","snapshot","getProduct","back","ProductListComponent","products","currentCategoryId","previousCategoryId","searchMode","pageNumber","totalElements","prevousKeyword","listProducts","has","handleSearchProducts","handleListProducts","searchProductPaginate","processResult","hasCategoryId","getProductListPaginate","number","size","updatePageSize","CartService","getCartItemsWithExpiry","ttl","now","expiry","getTime","setItem","key","itemStr","getItem","removeItem","alreadyExistInCart","existingCartItem","undefined","length","find","push","totalPriceValue","totalQuantityValue","persistCartItemsWithExpiry","EXPIRY_TIME","console","log","subTotal","toFixed","index","findIndex","currCartItem","splice","SuccessComponent","resetCart","StripeService","stripePromise","createCheckOutSession","session","redirectToStripe","alert","stripe","redirectToCheckout","sessionId","result","Token","access","expiresAt","expiresIn","refresh","type","LoginStatusComponent","subscrbieToAuthValues","on","user","handleUser","close","setUser","setIsAuthenticated","pathname","init","auth","open","logout","AuthService","theUser","createUser","setAuthToken","user_metadata","full_name","accessToken","access_token","refreshToken","refresh_token","tokenType","token_type","expires_at","expires_in","CanceledComponent","OrdersComponent","orderHistoryService","orders","sessionStorage","handleOrderHistory","errMessage","getOrderHistory","Luv2ShopValidators","control","trim","max","notOnlyWhitespaceMultipleCharacters","bootstrapModule","err","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","keys","module","exports"],"mappings":"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,GADqB,CACjB,QADiB,CADzB,MAEgB,IAFhB,IAEgB,aAFhB,GAEgB,MAFhB,GAEgB,GACZqF,QADY,CACHO,YAAY,CAAC1C,eAAb,CAA6BC,MAD1B,CAFhB;AAIA,gCAAI,CAACV,iBAAL,CACGzC,GADH,CACO,iBADP,OACyB,IADzB,IACyB,aADzB,GACyB,MADzB,GACyB,GACrBA,GADqB,CACjB,MADiB,CADzB,MAEc,IAFd,IAEc,aAFd,GAEc,MAFd,GAEc,GACVqF,QADU,CACDO,YAAY,CAAC1C,eAAb,CAA6BE,IAD5B,CAFd;AAIA,gCAAI,CAACX,iBAAL,CACGzC,GADH,CACO,iBADP,OACyB,IADzB,IACyB,aADzB,GACyB,MADzB,GACyB,GACrBA,GADqB,CACjB,SADiB,CADzB,MAEiB,IAFjB,IAEiB,aAFjB,GAEiB,MAFjB,GAEiB,GACbqF,QADa,CACJO,YAAY,CAAC1C,eAAb,CAA6BK,OADzB,CAFjB;AAKA,gCAAI,CAACd,iBAAL,CACGzC,GADH,CACO,gBADP,OACwB,IADxB,IACwB,aADxB,GACwB,MADxB,GACwB,GACpBA,GADoB,CAChB,QADgB,CADxB,MAEgB,IAFhB,IAEgB,aAFhB,GAEgB,MAFhB,GAEgB,GACZqF,QADY,CACHO,YAAY,CAACpC,cAAb,CAA4BL,MADzB,CAFhB;AAIA,gCAAI,CAACV,iBAAL,CACGzC,GADH,CACO,gBADP,OACwB,IADxB,IACwB,aADxB,GACwB,MADxB,GACwB,GACpBA,GADoB,CAChB,MADgB,CADxB,MAEc,IAFd,IAEc,aAFd,GAEc,MAFd,GAEc,GACVqF,QADU,CACDO,YAAY,CAACpC,cAAb,CAA4BJ,IAD3B,CAFd;AAIA,gCAAI,CAACX,iBAAL,CACGzC,GADH,CACO,gBADP,OACwB,IADxB,IACwB,aADxB,GACwB,MADxB,GACwB,GACpBA,GADoB,CAChB,SADgB,CADxB,MAEiB,IAFjB,IAEiB,aAFjB,GAEiB,MAFjB,GAEiB,GACbqF,QADa,CACJO,YAAY,CAACpC,cAAb,CAA4BD,OADxB,CAFjB;AAID,aAnCD;AAoCD;;;;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","file":"main-es5.js","sourcesContent":["/* \"Barrel\" of Http Interceptors */\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\nimport { AuthInterceptor } from './auth-interceptor';\r\n\r\n/** Http interceptor providers in outside-in order */\r\nexport const httpInterceptorProviders = [\r\n  { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\r\n];","import { Component, OnInit } from '@angular/core';\nimport { CartItem } from 'src/app/common/cart-item';\nimport { OrderItem } from 'src/app/common/order-item';\nimport { Purchase } from 'src/app/common/purchase';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { CartService } from 'src/app/services/cart.service';\nimport { StripeService } from 'src/app/services/stripe-service';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-cart-details',\n  templateUrl: './cart-details.component.html',\n  styleUrls: ['./cart-details.component.css'],\n})\nexport class CartDetailsComponent implements OnInit {\n  cartItems: CartItem[] = [];\n  totalPrice: number = 0;\n  totalQuantity: number = 0;\n  isAuthenticated: boolean = false;\n  loading: boolean = false;\n\n  private guestPurchaseUrl: string =\n    environment.API_URL + '/checkout/create-checkout-session';\n\n  constructor(\n    private cartService: CartService,\n    private authService: AuthService,\n    private stripeService: StripeService\n  ) {}\n\n  ngOnInit(): void {\n    this.isAuthenticated = this.authService.isAuthenticated.getValue();\n\n    this.stripeService.loading.subscribe((loading) => {\n      this.loading = loading;\n    });\n\n    this.authService.isAuthenticated.subscribe((isAuthenticated) => {\n      this.isAuthenticated = isAuthenticated;\n    });\n\n    this.listCartDetails();\n  }\n\n  checkout() {\n    const purchase: Purchase = new Purchase();\n    let orderItems: OrderItem[] = this.cartService.cartItems.map(\n      (item) => new OrderItem(item)\n    );\n    purchase.orderItems = orderItems;\n\n    this.stripeService.checkout(purchase, this.guestPurchaseUrl);\n  }\n\n  listCartDetails() {\n    this.cartItems = this.cartService.cartItems;\n\n    this.cartService.totalPrice.subscribe((data) => (this.totalPrice = data));\n\n    this.cartService.totalQuantity.subscribe(\n      (data) => (this.totalQuantity = data)\n    );\n\n    this.cartService.computeCartTotals();\n  }\n\n  incrementQuantity(cartItem: CartItem) {\n    this.cartService.addToCart(cartItem);\n  }\n\n  decrementQuantity(cartItem: CartItem) {\n    this.cartService.decrementQuantity(cartItem);\n  }\n\n  remove(cartItem: CartItem) {\n    this.cartService.remove(cartItem);\n  }\n}\n","<div class=\"main-content\">\n  <div class=\"section-content section-content-p30\">\n    <div class=\"container-fluid\">\n      <div\n        *ngIf=\"cartItems.length === 0\"\n        class=\"alert alert-warning col-md-12\"\n        role=\"alert\"\n      >\n        <h3>Your cart is empty.</h3>\n      </div>\n      <table *ngIf=\"cartItems.length > 0\" class=\"table table-bordered\">\n        <tr>\n          <th width=\"20%\">Product Image</th>\n          <th width=\"50%\">Product Detail</th>\n          <th width=\"30%\"></th>\n        </tr>\n        <tr *ngFor=\"let cartItem of cartItems\">\n          <td>\n            <img\n              src=\"{{ cartItem.imageUrl }}\"\n              class=\"img-responsive\"\n              width=\"150px\"\n            />\n          </td>\n          <td>\n            <p>{{ cartItem.name }}</p>\n            <p>{{ cartItem.description }}</p>\n            <p>{{ cartItem.unitPrice | currency: \"USD\" }}</p>\n          </td>\n          <td>\n            <div class=\"items mb-2\">\n              <label>Quantity</label>\n              <div class=\"row no-gutters\">\n                <div>\n                  <button\n                    (click)=\"decrementQuantity(cartItem)\"\n                    class=\"btn btn-secondary btn-sm\"\n                  >\n                    <i class=\"fa fa-minus\" aria-hidden=\"true\"></i>\n                  </button>\n                </div>\n\n                <div class=\"mx-3\">\n                  {{ cartItem.quantity }}\n                </div>\n\n                <div>\n                  <button\n                    (click)=\"incrementQuantity(cartItem)\"\n                    class=\"btn btn-secondary btn-sm\"\n                  >\n                    <i class=\"fa fa-plus\" aria-hidden=\"true\"></i>\n                  </button>\n                </div>\n              </div>\n            </div>\n            <p>\n              Sub-total\n              {{ cartItem.quantity * cartItem.unitPrice | currency: \"USD\" }}\n            </p>\n            <button (click)=\"remove(cartItem)\" class=\"primary-btn\">\n              Remove\n            </button>\n          </td>\n        </tr>\n        <tr>\n          <td colspan=\"2\"></td>\n          <td>\n            <b>Total Quantity: {{ totalQuantity }}</b>\n            <p>Shipping FREE</p>\n            <b>Total Price: {{ totalPrice | currency: \"USD\" }}</b\n            ><br />\n            <a\n              *ngIf=\"isAuthenticated\"\n              routerLink=\"/checkout\"\n              class=\"primary-btn mt-3\"\n              >Proceed Checkout</a\n            >\n            <button\n              *ngIf=\"!isAuthenticated\"\n              [disabled]=\"loading\"\n              class=\"primary-btn mt-3\"\n              id=\"checkout-button\"\n              (click)=\"checkout()\"\n            >\n              {{ loading ? \"Please wait\" : \"Checkout as Guest\" }}\n            </button>\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n</div>\n","export class Order {\n    totalQuantity!: number;\n    totalPrice!: number;\n}\n","export const environment = {\n  production: false,\n  API_URL: 'http://localhost:8080/api',\n  STRIPE_KEY: 'pk_test_2MCK2bbELvdA3QNUXcRsXY3b',\n};\n","import { Address } from \"./address\";\nimport { Customer } from \"./customer\";\nimport { Order } from \"./order\";\nimport { OrderItem } from \"./order-item\";\n\nexport class Purchase {\n    customer!: Customer;\n    shippingAddress!: Address;\n    billingAddress!: Address;\n    order!: Order;\n    orderItems!: OrderItem[];\n}\n","import { Token } from \"./token\";\n\nexport class User {\n    id: string;\n    email: string;\n    name: string;\n    token: Token;\n\n    constructor(id:string, email:string, name:string, token:Token) {\n        this.id = id;\n        this.email = email;\n        this.name = name;\n        this.token = token;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Product } from '../common/product';\nimport { ProductCategory } from '../common/product-category';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductService {\n  private baseUrl: string = environment.API_URL;\n\n  constructor(private httpClient: HttpClient) {}\n\n  getProductListPaginate(\n    page: number,\n    pageSize: number,\n    categoryId: number\n  ): Observable<GetResponseProducts> {\n    const searchUrl: string = `${this.baseUrl}/products/search/findByProductCategoryId?id=${categoryId}&page=${page}&size=${pageSize}`;\n    return this.httpClient.get<GetResponseProducts>(searchUrl);\n  }\n\n  getProductList(categoryId: number): Observable<GetResponseProducts> {\n    const searchUrl: string = `${this.baseUrl}/products/search/findByProductCategoryId?id=${categoryId}`;\n    return this.httpClient.get<GetResponseProducts>(searchUrl);\n  }\n\n  getProductCategories(): Observable<GetResponseProductCategory> {\n    const categoryUrl: string = `${this.baseUrl}/product-category`;\n    return this.httpClient.get<GetResponseProductCategory>(categoryUrl);\n  }\n\n  searchProducts(keyword: string): Observable<GetResponseProducts> {\n    const searchUrl: string = `${this.baseUrl}/products/search/findProductByNameContaining?name=${keyword}`;\n    return this.httpClient.get<GetResponseProducts>(searchUrl);\n  }\n\n  searchProductPaginate(\n    page: number,\n    pageSize: number,\n    keyword: string\n  ): Observable<GetResponseProducts> {\n    const searchUrl: string = `${this.baseUrl}/products/search/findProductByNameContaining?name=${keyword}&page=${page}&size=${pageSize}`;\n    return this.httpClient.get<GetResponseProducts>(searchUrl);\n  }\n\n  getProduct(id: number): Observable<Product> {\n    const productUrl: string = `${this.baseUrl}/products/${id}`;\n    return this.httpClient.get<Product>(productUrl);\n  }\n}\n\nexport interface GetResponseProducts {\n  _embedded: {\n    products: Product[];\n  };\n  page: {\n    size: number;\n    totalElements: number;\n    totalPages: number;\n    number: number;\n  };\n}\n\ninterface GetResponseProductCategory {\n  _embedded: {\n    productCategory: ProductCategory[];\n  };\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { Country } from '../common/country';\nimport { State } from '../common/state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class Luv2ShopFormService {\n  private countriesUrl = environment.API_URL + '/countries';\n  private statesUrl = environment.API_URL + '/states';\n\n  constructor(private httpClient: HttpClient) {}\n\n  getCountries(): Observable<GetResponseCountries> {\n    return this.httpClient.get<GetResponseCountries>(this.countriesUrl);\n  }\n\n  getStates(countryCode: string): Observable<GetResponseStates> {\n    const searchUrl =\n      this.statesUrl + '/search/findByCountryCode?code=' + countryCode;\n    return this.httpClient.get<GetResponseStates>(searchUrl);\n  }\n}\n\ninterface GetResponseCountries {\n  _embedded: {\n    countries: Country[];\n  };\n}\n\ninterface GetResponseStates {\n  _embedded: {\n    states: State[];\n  };\n}\n","import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, Subject, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { OrderHistory } from '../common/order-history';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderHistoryService {\n  private ordersUrl: string = environment.API_URL + '/orders/findByEmail';\n  errorMsg: Subject<string> = new Subject<string>();\n\n  constructor(private httpClient: HttpClient) {}\n\n  getOrderHistory(): Observable<OrderHistory[]> {\n    return this.httpClient\n      .get<OrderHistory[]>(this.ordersUrl)\n      .pipe(catchError(this.handleError));\n  }\n\n  private handleError = (error: HttpErrorResponse) => {\n    this.errorMsg.next(error.error.message);\n\n    return throwError(error.error.message);\n  };\n}\n","import { Product } from \"./product\";\n\nexport class CartItem {\n    id: number;\n    name: string;\n    description: string;\n    imageUrl: string;\n    unitPrice: number;\n    quantity: number;\n\n    constructor(product: Product) {\n        this.id = product.id;\n        this.name = product.name;\n        this.description = product.description;\n        this.imageUrl = product.imageUrl;\n        this.unitPrice = product.unitPrice;\n        this.quantity = 1;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private authService: AuthService) {}\n\n  intercept(\n    request: HttpRequest<unknown>,\n    next: HttpHandler\n  ): Observable<HttpEvent<unknown>> {\n    // Get the auth token from the service.\n    const authToken = this.authService.authToken;\n\n    if (authToken != null) {\n      const authReq = request.clone({\n        headers: request.headers.set('Authorization', authToken),\n      });\n\n      return next.handle(authReq);\n    }\n\n    return next.handle(request);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { CartItem } from 'src/app/common/cart-item';\nimport { Country } from 'src/app/common/country';\nimport { Order } from 'src/app/common/order';\nimport { OrderItem } from 'src/app/common/order-item';\nimport { Purchase } from 'src/app/common/purchase';\nimport { State } from 'src/app/common/state';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { CartService } from 'src/app/services/cart.service';\nimport { CheckoutService } from 'src/app/services/checkout.service';\nimport { Luv2ShopFormService } from 'src/app/services/luv2-shop-form.service';\nimport { StripeService } from 'src/app/services/stripe-service';\nimport { Luv2ShopValidators } from 'src/app/validators/luv2-shop-validators';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-checkout',\n  templateUrl: './checkout.component.html',\n  styleUrls: ['./checkout.component.css'],\n})\nexport class CheckoutComponent implements OnInit {\n  checkoutFormGroup!: FormGroup;\n  totalPrice: number = 0;\n  totalQuantity: number = 0;\n  countries: Country[] = [];\n  shippingAddressStates: State[] = [];\n  billingAddressStates: State[] = [];\n  storage: Storage = localStorage;\n\n  isAuthenticated: boolean = false;\n  loading: boolean = false;\n\n  private purchaseUrl: string = environment.API_URL + '/checkout/purchase';\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private cartService: CartService,\n    private luv2ShopFormService: Luv2ShopFormService,\n    private checkoutService: CheckoutService,\n    private authService: AuthService,\n    private stripeService: StripeService\n  ) {}\n\n  ngOnInit(): void {\n    this.isAuthenticated = this.authService.isAuthenticated.getValue();\n\n    this.stripeService.loading.subscribe((loading) => {\n      this.loading = loading;\n    });\n\n    this.authService.isAuthenticated.subscribe((isAuthenticated) => {\n      this.isAuthenticated = isAuthenticated;\n      if (isAuthenticated) {\n        this.getCustomerInfo();\n      }\n    });\n\n    this.checkoutFormGroup = this.formBuilder.group({\n      customer: this.formBuilder.group({\n        firstName: new FormControl('', [\n          Validators.required,\n          Validators.minLength(2),\n          Luv2ShopValidators.notOnlyWhitespace,\n          Luv2ShopValidators.notOnlyWhitespaceWithOneLetter,\n        ]),\n        lastName: new FormControl('', [\n          Validators.required,\n          Validators.minLength(2),\n          Luv2ShopValidators.notOnlyWhitespace,\n          Luv2ShopValidators.notOnlyWhitespaceWithOneLetter,\n        ]),\n      }),\n      shippingAddress: this.formBuilder.group({\n        street: new FormControl('', [\n          Validators.required,\n          Validators.minLength(2),\n          Luv2ShopValidators.notOnlyWhitespace,\n          Luv2ShopValidators.notOnlyWhitespaceWithOneLetter,\n        ]),\n        city: new FormControl('', [\n          Validators.required,\n          Validators.minLength(2),\n          Luv2ShopValidators.notOnlyWhitespace,\n          Luv2ShopValidators.notOnlyWhitespaceWithOneLetter,\n        ]),\n        state: new FormControl('', [\n          Validators.required,\n          Luv2ShopValidators.notOnlyWhitespace,\n        ]),\n        country: new FormControl('', [\n          Validators.required,\n          Luv2ShopValidators.notOnlyWhitespace,\n        ]),\n        zipCode: new FormControl('', [\n          Validators.required,\n          Validators.minLength(2),\n          Luv2ShopValidators.notOnlyWhitespace,\n          Luv2ShopValidators.notOnlyWhitespaceWithOneLetter,\n        ]),\n      }),\n      billingAddress: this.formBuilder.group({\n        street: new FormControl('', [\n          Validators.required,\n          Validators.minLength(2),\n          Luv2ShopValidators.notOnlyWhitespace,\n          Luv2ShopValidators.notOnlyWhitespaceWithOneLetter,\n        ]),\n        city: new FormControl('', [\n          Validators.required,\n          Validators.minLength(2),\n          Luv2ShopValidators.notOnlyWhitespace,\n          Luv2ShopValidators.notOnlyWhitespaceWithOneLetter,\n        ]),\n        state: new FormControl('', [\n          Validators.required,\n          Luv2ShopValidators.notOnlyWhitespace,\n        ]),\n        country: new FormControl('', [\n          Validators.required,\n          Luv2ShopValidators.notOnlyWhitespace,\n        ]),\n        zipCode: new FormControl('', [\n          Validators.required,\n          Validators.minLength(2),\n          Luv2ShopValidators.notOnlyWhitespace,\n          Luv2ShopValidators.notOnlyWhitespaceWithOneLetter,\n        ]),\n      }),\n    });\n\n    const startMonth: number = new Date().getMonth() + 1;\n\n    this.luv2ShopFormService.getCountries().subscribe((data) => {\n      this.countries = data._embedded.countries;\n    });\n\n    this.setCartTotals();\n  }\n\n  setCartTotals() {\n    this.cartService.totalPrice.subscribe(\n      (totalPrice) => (this.totalPrice = totalPrice)\n    );\n    this.cartService.totalQuantity.subscribe(\n      (totalQuantity) => (this.totalQuantity = totalQuantity)\n    );\n  }\n\n  onSubmit() {\n    if (this.checkoutFormGroup.invalid) {\n      this.checkoutFormGroup.markAllAsTouched();\n      return;\n    }\n\n    const cartItems: CartItem[] = this.cartService.cartItems;\n\n    let order: Order = new Order();\n    order.totalPrice = this.totalPrice;\n    order.totalQuantity = this.totalQuantity;\n\n    let orderItems: OrderItem[] = cartItems.map((item) => new OrderItem(item));\n\n    let purchase: Purchase = new Purchase();\n\n    purchase.customer = this.checkoutFormGroup.controls['customer'].value;\n\n    purchase.shippingAddress =\n      this.checkoutFormGroup.controls['shippingAddress'].value;\n    const shippingState: State = JSON.parse(\n      JSON.stringify(purchase.shippingAddress.state)\n    );\n    const shippingCountry: Country = JSON.parse(\n      JSON.stringify(purchase.shippingAddress.country)\n    );\n    purchase.shippingAddress.state = shippingState.name;\n    purchase.shippingAddress.country = shippingCountry.name;\n\n    purchase.billingAddress =\n      this.checkoutFormGroup.controls['billingAddress'].value;\n    const billingState: State = JSON.parse(\n      JSON.stringify(purchase.billingAddress.state)\n    );\n    const billingCountry: Country = JSON.parse(\n      JSON.stringify(purchase.billingAddress.country)\n    );\n    purchase.billingAddress.state = billingState.name;\n    purchase.billingAddress.country = billingCountry.name;\n\n    purchase.order = order;\n    purchase.orderItems = orderItems;\n\n    this.stripeService.checkout(purchase, this.purchaseUrl);\n  }\n\n  handleMonthsAndYears() {\n    const creditCardFormGroup = this.checkoutFormGroup.get('creditCard');\n\n    const currentYear: number = new Date().getFullYear();\n    const selectedYear: number = Number(\n      creditCardFormGroup?.value.expirationYear\n    );\n\n    let startMonth: number;\n\n    if (currentYear === selectedYear) {\n      startMonth = new Date().getMonth() + 1;\n    } else {\n      startMonth = 1;\n    }\n  }\n\n  copyShippingAddressToBillingAddress(event: Event) {\n    if (event.target !== null) {\n      const checkBox: HTMLInputElement = event.target as HTMLInputElement;\n\n      if (checkBox.checked) {\n        this.checkoutFormGroup.controls.billingAddress.setValue(\n          this.checkoutFormGroup.controls.shippingAddress.value\n        );\n        this.billingAddressStates = this.shippingAddressStates;\n      } else {\n        this.checkoutFormGroup.controls.billingAddress.reset();\n        this.billingAddressStates = [];\n      }\n    }\n  }\n\n  get firstName() {\n    return this.checkoutFormGroup.get('customer.firstName');\n  }\n  get lastName() {\n    return this.checkoutFormGroup.get('customer.lastName');\n  }\n\n  get shippingAddressStreet() {\n    return this.checkoutFormGroup.get('shippingAddress.street');\n  }\n  get shippingAddressCity() {\n    return this.checkoutFormGroup.get('shippingAddress.city');\n  }\n  get shippingAddressState() {\n    return this.checkoutFormGroup.get('shippingAddress.state');\n  }\n  get shippingAddressCountry() {\n    return this.checkoutFormGroup.get('shippingAddress.country');\n  }\n  get shippingAddressZipCode() {\n    return this.checkoutFormGroup.get('shippingAddress.zipCode');\n  }\n\n  get billingAddressStreet() {\n    return this.checkoutFormGroup.get('billingAddress.street');\n  }\n  get billingAddressCity() {\n    return this.checkoutFormGroup.get('billingAddress.city');\n  }\n  get billingAddressState() {\n    return this.checkoutFormGroup.get('billingAddress.state');\n  }\n  get billingAddressCountry() {\n    return this.checkoutFormGroup.get('billingAddress.country');\n  }\n  get billingAddressZipCode() {\n    return this.checkoutFormGroup.get('billingAddress.zipCode');\n  }\n\n  get cardType() {\n    return this.checkoutFormGroup.get('creditCard.cardType');\n  }\n  get nameOnCard() {\n    return this.checkoutFormGroup.get('creditCard.nameOnCard');\n  }\n  get cardNumber() {\n    return this.checkoutFormGroup.get('creditCard.cardNumber');\n  }\n  get securityCode() {\n    return this.checkoutFormGroup.get('creditCard.securityCode');\n  }\n  get expirationMonth() {\n    return this.checkoutFormGroup.get('creditCard.expirationMonth');\n  }\n  get expirationYear() {\n    return this.checkoutFormGroup.get('creditCard.expirationYear');\n  }\n\n  getStates(formGroupName: string) {\n    const formGroup = this.checkoutFormGroup.get(formGroupName);\n    const countryCode = formGroup?.value.country.code;\n\n    this.luv2ShopFormService.getStates(countryCode).subscribe((data) => {\n      let states: State[] = data._embedded.states;\n\n      if (formGroupName === 'shippingAddress') {\n        this.shippingAddressStates = states;\n      } else {\n        this.billingAddressStates = states;\n      }\n\n      formGroup?.get('state')?.setValue(states[0]);\n    });\n  }\n\n  getCustomerInfo() {\n    this.checkoutService.getCustomerInfo().subscribe((customerInfo) => {\n      this.checkoutFormGroup\n        .get('customer')\n        ?.get('firstName')\n        ?.setValue(customerInfo.firstName);\n      this.checkoutFormGroup\n        .get('customer')\n        ?.get('lastName')\n        ?.setValue(customerInfo.lastName);\n\n      this.checkoutFormGroup\n        .get('shippingAddress')\n        ?.get('street')\n        ?.setValue(customerInfo.shippingAddress.street);\n      this.checkoutFormGroup\n        .get('shippingAddress')\n        ?.get('city')\n        ?.setValue(customerInfo.shippingAddress.city);\n      this.checkoutFormGroup\n        .get('shippingAddress')\n        ?.get('zipCode')\n        ?.setValue(customerInfo.shippingAddress.zipCode);\n\n      this.checkoutFormGroup\n        .get('billingAddress')\n        ?.get('street')\n        ?.setValue(customerInfo.billingAddress.street);\n      this.checkoutFormGroup\n        .get('billingAddress')\n        ?.get('city')\n        ?.setValue(customerInfo.billingAddress.city);\n      this.checkoutFormGroup\n        .get('billingAddress')\n        ?.get('zipCode')\n        ?.setValue(customerInfo.billingAddress.zipCode);\n    });\n  }\n}\n","<div class=\"main-content page-m\">\n  <div class=\"section-content section-content-p30 e-spc\">\n    <div\n      *ngIf=\"!isAuthenticated\"\n      class=\"alert alert-warning mt-5 col-md-12\"\n      role=\"alert\"\n    >\n      <h3>You must be log in to check out.</h3>\n      <p>Log out and log back in if your browser has been idle for awhile.</p>\n    </div>\n\n    <form\n      *ngIf=\"isAuthenticated\"\n      [formGroup]=\"checkoutFormGroup\"\n      (ngSubmit)=\"onSubmit()\"\n      class=\"container-fluid\"\n    >\n      <!-- Customer Details -->\n      <div formGroupName=\"customer\" class=\"form-area\">\n        <h3>Customer</h3>\n        <div class=\"row\">\n          <div class=\"col-md-6\">\n            <div class=\"input-space\">\n              <input\n                formControlName=\"firstName\"\n                type=\"text\"\n                placeholder=\"First Name\"\n              />\n              <div\n                class=\"alert alert-danger mt-1\"\n                *ngIf=\"\n                  firstName!.invalid && (firstName!.dirty || firstName!.touched)\n                \"\n              >\n                <div\n                  *ngIf=\"\n                    firstName!.errors!.notOnlyWhitespace ||\n                    firstName!.errors!.required\n                  \"\n                >\n                  First name is required\n                </div>\n                <div\n                  *ngIf=\"\n                    firstName!.errors!.minlength ||\n                    firstName!.errors!.notOnlyWhitespaceWithOneLetter\n                  \"\n                >\n                  First name must be at least 2 characters long\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-md-6\">\n            <div class=\"input-space\">\n              <input\n                formControlName=\"lastName\"\n                type=\"text\"\n                placeholder=\"Last Name\"\n              />\n\n              <div\n                class=\"alert alert-danger mt-1\"\n                *ngIf=\"\n                  lastName!.invalid && (lastName!.dirty || lastName!.touched)\n                \"\n              >\n                <div\n                  *ngIf=\"\n                    lastName!.errors!.required ||\n                    lastName?.errors?.notOnlyWhitespace\n                  \"\n                >\n                  Last name is required\n                </div>\n                <div\n                  *ngIf=\"\n                    lastName!.errors!.minlength ||\n                    lastName!.errors!.notOnlyWhitespaceWithOneLetter\n                  \"\n                >\n                  Last name must be at least 2 characters long\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Shipping Address Details -->\n      <div formGroupName=\"shippingAddress\" class=\"form-area\">\n        <h3>Shipping Address</h3>\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <div class=\"input-space\">\n              <input\n                formControlName=\"street\"\n                type=\"text\"\n                placeholder=\"Street\"\n              />\n\n              <div\n                class=\"alert alert-danger mt-1\"\n                *ngIf=\"\n                  shippingAddressStreet!.invalid &&\n                  (shippingAddressStreet!.dirty ||\n                    shippingAddressStreet!.touched)\n                \"\n              >\n                <div\n                  *ngIf=\"\n                    shippingAddressStreet!.errors!.required ||\n                    shippingAddressStreet?.errors?.notOnlyWhitespace\n                  \"\n                >\n                  Street name is required\n                </div>\n                <div\n                  *ngIf=\"\n                    shippingAddressStreet!.errors!.minlength ||\n                    shippingAddressStreet!.errors!\n                      .notOnlyWhitespaceWithOneLetter\n                  \"\n                >\n                  Street name must be at least 2 characters long\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-md-12\">\n            <div class=\"input-space\">\n              <input formControlName=\"city\" type=\"text\" placeholder=\"City\" />\n\n              <div\n                class=\"alert alert-danger mt-1\"\n                *ngIf=\"\n                  shippingAddressCity!.invalid &&\n                  (shippingAddressCity!.dirty || shippingAddressCity!.touched)\n                \"\n              >\n                <div\n                  *ngIf=\"\n                    shippingAddressCity!.errors!.required ||\n                    shippingAddressCity?.errors?.notOnlyWhitespace\n                  \"\n                >\n                  City name is required\n                </div>\n                <div\n                  *ngIf=\"\n                    shippingAddressCity!.errors!.minlength ||\n                    shippingAddressCity!.errors!.notOnlyWhitespaceWithOneLetter\n                  \"\n                >\n                  City name must be at least 2 characters long\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"col-md-12\">\n            <div class=\"input-space\">\n              <label\n                style=\"margin-bottom: 5px; padding-left: 10px\"\n                for=\"country\"\n                >Country</label\n              >\n              <select\n                id=\"country\"\n                formControlName=\"country\"\n                (change)=\"getStates('shippingAddress')\"\n              >\n                <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n                  {{ country.name }}\n                </option>\n              </select>\n\n              <div\n                class=\"alert alert-danger mt-1\"\n                *ngIf=\"\n                  shippingAddressCountry!.invalid &&\n                  (shippingAddressCountry!.dirty ||\n                    shippingAddressCountry!.touched)\n                \"\n              >\n                <div\n                  *ngIf=\"\n                    shippingAddressCountry!.errors!.required ||\n                    shippingAddressCountry?.errors?.notOnlyWhitespace\n                  \"\n                >\n                  Country name is required\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"col-md-12\">\n            <div class=\"input-space\">\n              <label\n                style=\"margin-bottom: 5px; padding-left: 10px\"\n                for=\"shippingState\"\n                >State / Province</label\n              >\n\n              <select id=\"shippingState\" formControlName=\"state\">\n                <option\n                  *ngFor=\"let state of shippingAddressStates\"\n                  [ngValue]=\"state\"\n                >\n                  {{ state.name }}\n                </option>\n              </select>\n\n              <div\n                class=\"alert alert-danger mt-1\"\n                *ngIf=\"\n                  shippingAddressState!.invalid &&\n                  (shippingAddressState!.dirty || shippingAddressState!.touched)\n                \"\n              >\n                <div\n                  *ngIf=\"\n                    shippingAddressState!.errors!.required ||\n                    shippingAddressState?.errors?.notOnlyWhitespace\n                  \"\n                >\n                  State name is required\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"col-md-12\">\n            <div class=\"input-space\">\n              <input\n                formControlName=\"zipCode\"\n                type=\"text\"\n                placeholder=\"Zip Code / Postal Code\"\n              />\n\n              <div\n                class=\"alert alert-danger mt-1\"\n                *ngIf=\"\n                  shippingAddressZipCode!.invalid &&\n                  (shippingAddressZipCode!.dirty ||\n                    shippingAddressZipCode!.touched)\n                \"\n              >\n                <div\n                  *ngIf=\"\n                    shippingAddressZipCode!.errors!.required ||\n                    shippingAddressZipCode?.errors?.notOnlyWhitespace\n                  \"\n                >\n                  Zip Code is required\n                </div>\n                <div\n                  *ngIf=\"\n                    shippingAddressZipCode!.errors!.minlength ||\n                    shippingAddressZipCode!.errors!\n                      .notOnlyWhitespaceWithOneLetter\n                  \"\n                >\n                  Zip Code must be at least 2 characters long\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- BILLING SAME AS SHIPPING ADDRESS CHECKBOX -->\n      <div class=\"input-space\">\n        <label class=\"au-checkbox\">\n          <input\n            type=\"checkbox\"\n            (change)=\"copyShippingAddressToBillingAddress($event)\"\n          />\n          <span class=\"au-checkmark\"></span> Bill Address same as Shipping\n          Adress\n        </label>\n      </div>\n\n      <!-- Billing Address Details -->\n      <div formGroupName=\"billingAddress\" class=\"form-area\">\n        <h3>Billing Address</h3>\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <div class=\"input-space\">\n              <input\n                formControlName=\"street\"\n                type=\"text\"\n                placeholder=\"Street\"\n              />\n\n              <div\n                class=\"alert alert-danger mt-1\"\n                *ngIf=\"\n                  billingAddressStreet!.invalid &&\n                  (billingAddressStreet!.dirty || billingAddressStreet!.touched)\n                \"\n              >\n                <div\n                  *ngIf=\"\n                    billingAddressStreet!.errors!.required ||\n                    billingAddressStreet?.errors?.notOnlyWhitespace\n                  \"\n                >\n                  Street name is required\n                </div>\n                <div\n                  *ngIf=\"\n                    billingAddressStreet!.errors!.minlength ||\n                    billingAddressStreet!.errors!.notOnlyWhitespaceWithOneLetter\n                  \"\n                >\n                  Street name must be at least 2 characters long\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-md-12\">\n            <div class=\"input-space\">\n              <input formControlName=\"city\" type=\"text\" placeholder=\"City\" />\n\n              <div\n                class=\"alert alert-danger mt-1\"\n                *ngIf=\"\n                  billingAddressCity!.invalid &&\n                  (billingAddressCity!.dirty || billingAddressCity!.touched)\n                \"\n              >\n                <div\n                  *ngIf=\"\n                    billingAddressCity!.errors!.required ||\n                    billingAddressCity?.errors?.notOnlyWhitespace\n                  \"\n                >\n                  City name is required\n                </div>\n                <div\n                  *ngIf=\"\n                    billingAddressCity!.errors!.minlength ||\n                    billingAddressCity!.errors!.notOnlyWhitespaceWithOneLetter\n                  \"\n                >\n                  City name must be at least 2 characters long\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"col-md-12\">\n            <div class=\"input-space\">\n              <label\n                style=\"margin-bottom: 5px; padding-left: 10px\"\n                for=\"country-billing\"\n                >Country</label\n              >\n              <select\n                id=\"country-billing\"\n                formControlName=\"country\"\n                (change)=\"getStates('billingAddress')\"\n              >\n                <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n                  {{ country.name }}\n                </option>\n              </select>\n\n              <div\n                class=\"alert alert-danger mt-1\"\n                *ngIf=\"\n                  billingAddressCountry!.invalid &&\n                  (billingAddressCountry!.dirty ||\n                    billingAddressCountry!.touched)\n                \"\n              >\n                <div\n                  *ngIf=\"\n                    billingAddressCountry!.errors!.required ||\n                    billingAddressCountry?.errors?.notOnlyWhitespace\n                  \"\n                >\n                  Country name is required\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"col-md-12\">\n            <div class=\"input-space\">\n              <label\n                style=\"margin-bottom: 5px; padding-left: 10px\"\n                for=\"billingState\"\n                >State / Province</label\n              >\n              <select id=\"billingState\" formControlName=\"state\">\n                <option\n                  *ngFor=\"let state of billingAddressStates\"\n                  [ngValue]=\"state\"\n                >\n                  {{ state.name }}\n                </option>\n              </select>\n\n              <div\n                class=\"alert alert-danger mt-1\"\n                *ngIf=\"\n                  billingAddressState!.invalid &&\n                  (billingAddressState!.dirty || billingAddressState!.touched)\n                \"\n              >\n                <div\n                  *ngIf=\"\n                    billingAddressState!.errors!.required ||\n                    billingAddressState?.errors?.notOnlyWhitespace\n                  \"\n                >\n                  State name is required\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"col-md-12\">\n            <div class=\"input-space\">\n              <input\n                formControlName=\"zipCode\"\n                type=\"text\"\n                placeholder=\"Zip Code / Postal Code\"\n              />\n\n              <div\n                class=\"alert alert-danger mt-1\"\n                *ngIf=\"\n                  billingAddressZipCode!.invalid &&\n                  (billingAddressZipCode!.dirty ||\n                    billingAddressZipCode!.touched)\n                \"\n              >\n                <div\n                  *ngIf=\"\n                    billingAddressZipCode!.errors!.required ||\n                    billingAddressZipCode?.errors?.notOnlyWhitespace\n                  \"\n                >\n                  Zip Code is required\n                </div>\n                <div\n                  *ngIf=\"\n                    billingAddressZipCode!.errors!.minlength ||\n                    billingAddressZipCode!.errors!\n                      .notOnlyWhitespaceWithOneLetter\n                  \"\n                >\n                  Zip Code must be at least 2 characters long\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-area\">\n        <h3>Review Your Order</h3>\n        <b>Total Quantity: {{ totalQuantity }}</b>\n        <h4 class=\"my-2\">Shipping: FREE</h4>\n        <B>Total Price: {{ totalPrice | currency: \"USD\" }}</B>\n      </div>\n      <div class=\"text-center\">\n        <button\n          [disabled]=\"loading\"\n          type=\"submit\"\n          class=\"btn btn-info\"\n          id=\"submit\"\n        >\n          {{ loading ? \"Please wait\" : \"Checkout\" }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n\n<!-- <div formGroupName=\"creditCard\" class=\"form-area\">\n  <h3>Credit Card</h3>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div class=\"input-space\">\n        <label\n          style=\"margin-bottom: 5px; padding-left: 10px\"\n          for=\"cardType\"\n          >Card Type</label\n        >\n        <select id=\"cardType\" formControlName=\"cardType\">\n          <option>Visa</option>\n          <option>MasterCard</option>\n        </select>\n\n        <div\n          class=\"alert alert-danger mt-1\"\n          *ngIf=\"\n            cardType!.invalid && (cardType!.dirty || cardType!.touched)\n          \"\n        >\n          <div\n            *ngIf=\"\n              cardType!.errors!.required ||\n              cardType?.errors?.notOnlyWhitespace\n            \"\n          >\n            Card Type is required\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-md-12\">\n      <div class=\"input-space\">\n        <input\n          formControlName=\"nameOnCard\"\n          type=\"text\"\n          placeholder=\"Name on card\"\n        />\n\n        <div\n          class=\"alert alert-danger mt-1\"\n          *ngIf=\"\n            nameOnCard!.invalid &&\n            (nameOnCard!.dirty || nameOnCard!.touched)\n          \"\n        >\n          <div\n            *ngIf=\"\n              nameOnCard!.errors!.required ||\n              nameOnCard?.errors?.notOnlyWhitespace\n            \"\n          >\n            Name on Card is required\n          </div>\n          <div\n            *ngIf=\"\n              nameOnCard!.errors!.minlength ||\n              nameOnCard!.errors!.notOnlyWhitespaceWithOneLetter\n            \"\n          >\n            Name on Card must be at least 2 characters long\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"clearfix\"></div>\n    <div class=\"col-md-8\">\n      <div class=\"input-space\">\n        <input\n          formControlName=\"cardNumber\"\n          type=\"text\"\n          placeholder=\"Card number\"\n        />\n\n        <div\n          class=\"alert alert-danger mt-1\"\n          *ngIf=\"\n            cardNumber!.invalid &&\n            (cardNumber!.dirty || cardNumber!.touched)\n          \"\n        >\n          <div *ngIf=\"cardNumber!.errors!.required\">\n            Card Number is required\n          </div>\n          <div *ngIf=\"cardNumber!.errors!.pattern\">\n            Must be a valid Card format\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-md-4\">\n      <div class=\"input-space\">\n        <input\n          formControlName=\"securityCode\"\n          type=\"text\"\n          placeholder=\"CVV2 number\"\n        />\n\n        <div\n          class=\"alert alert-danger mt-1\"\n          *ngIf=\"\n            securityCode!.invalid &&\n            (securityCode!.dirty || securityCode!.touched)\n          \"\n        >\n          <div *ngIf=\"securityCode!.errors!.required\">\n            CW2 is required\n          </div>\n          <div *ngIf=\"securityCode!.errors!.pattern\">\n            Must be a valid CW2 format\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"clearfix\"></div>\n\n    <div class=\"col-md-2\">\n      <label class=\"date\">Expiration Date</label>\n    </div>\n    <div class=\"col-md-5\">\n      <div class=\"input-space\">\n        <label style=\"margin-bottom: 5px; padding-left: 10px\" for=\"month\"\n          >Month</label\n        >\n        <select id=\"month\" formControlName=\"expirationMonth\">\n          <option\n            *ngFor=\"let month of creditCardMonths\"\n            value=\"{{ month.numberValue }}\"\n          >\n            {{ month.stringValue }}\n          </option>\n        </select>\n\n        <div\n          class=\"alert alert-danger mt-1\"\n          *ngIf=\"\n            expirationMonth!.invalid &&\n            (expirationMonth!.dirty || expirationMonth!.touched)\n          \"\n        >\n          <div\n            *ngIf=\"\n              expirationMonth!.errors!.required ||\n              expirationMonth?.errors?.notOnlyWhitespace\n            \"\n          >\n            Expiration Month is required\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-md-5\">\n      <div class=\"input-space\">\n        <label style=\"margin-bottom: 5px; padding-left: 10px\" for=\"year\"\n          >Year</label\n        >\n        <select\n          id=\"year\"\n          formControlName=\"expirationYear\"\n          (change)=\"handleMonthsAndYears()\"\n        >\n          <option *ngFor=\"let year of creditCardYears\" value=\"{{ year }}\">\n            {{ year }}\n          </option>\n        </select>\n\n        <div\n          class=\"alert alert-danger mt-1\"\n          *ngIf=\"\n            expirationYear!.invalid &&\n            (expirationYear!.dirty || expirationYear!.touched)\n          \"\n        >\n          <div\n            *ngIf=\"\n              expirationYear!.errors!.required ||\n              expirationYear?.errors?.notOnlyWhitespace\n            \"\n          >\n            Expiration Year is required\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div> -->\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.css'],\n})\nexport class SearchComponent implements OnInit {\n  constructor(private router: Router) {}\n\n  ngOnInit(): void {}\n\n  doSearch(value: string) {\n    this.router.navigateByUrl(`search/${value}`);\n  }\n}\n","<div class=\"form-header\">\n  <input\n    #myInput\n    class=\"au-input au-input-xl\"\n    type=\"text\"\n    placeholder=\"Search for products ...\"\n    (keyup.enter)=\"doSearch(myInput.value)\"\n  />\n  <button (click)=\"doSearch(myInput.value)\" class=\"au-btn-submit\" type=\"button\">\n    Search\n  </button>\n</div>\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { CustomerInfo } from '../common/customer-info';\nimport { Purchase } from '../common/purchase';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutService {\n  private purchaseUrl: string = environment.API_URL + '/checkout/purchase';\n\n  constructor(private httpClient: HttpClient) {}\n\n  placeOrder(purchase: Purchase): Observable<any> {\n    return this.httpClient.post<Purchase>(this.purchaseUrl, purchase);\n  }\n\n  createCheckOutSession(\n    purchase: Purchase,\n    url: string\n  ): Observable<GetStripeId> {\n    return this.httpClient.post<GetStripeId>(url, purchase);\n  }\n\n  getCustomerInfo(): Observable<CustomerInfo> {\n    return this.httpClient.get<CustomerInfo>(this.purchaseUrl);\n  }\n}\n\ninterface GetStripeId {\n  id: string;\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'angular-ecommerce';\n}\n","<div class=\"page-wrapper\">\n  <!-- MENU SIDEBAR-->\n  <aside class=\"menu-sidebar d-none d-lg-block\">\n    <div class=\"logo\">\n      <a routerLink=\"/\">\n        <img\n          src=\"assets/images/logo.png\"\n          alt=\"luv2shop\"\n          class=\"img-responsive\"\n        />\n      </a>\n    </div>\n\n    <!-- MENU SIDEBAR -->\n    <app-product-category-menu></app-product-category-menu>\n  </aside>\n  <!-- END MENU SIDEBAR-->\n\n  <!-- PAGE CONTAINER-->\n  <div class=\"page-container\">\n    <!-- HEADER DESKTOP-->\n    <header class=\"header-desktop\">\n      <div class=\"section-content section-content-p30\">\n        <div class=\"container-fluid\">\n          <div class=\"header-wrap\">\n            <!-- SEARCH COMPONENT -->\n            <app-search></app-search>\n            <!-- LOGIN STATUS COMPONENT -->\n            <app-login-status></app-login-status>\n            <!-- CART STATUS -->\n            <app-cart-status></app-cart-status>\n          </div>\n          <div class=\"account-wrap\"></div>\n        </div>\n      </div>\n    </header>\n    <!-- END HEADER DESKTOP-->\n\n    <!-- MAIN CONTENT -->\n    <router-outlet></router-outlet>\n  </div>\n  <!-- END OF PAGE CONTAINER -->\n</div>\n<!-- END OF PAGE WRAPPER -->\n\n<!-- FOOTER -->\n<footer>\n  <ul>\n    <li><a href=\"#\">About Us</a></li>\n    <li><a href=\"#\">Contact Us</a></li>\n    <li><a href=\"#\">Help</a></li>\n  </ul>\n</footer>\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private authService: AuthService, private router: Router) { }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const isAuthenticated = this.authService.isAuthenticated.getValue();\n\n    if (!isAuthenticated) {\n      this.router.navigateByUrl(\"/\");\n    }\n\n    return isAuthenticated;\n  }\n  \n}\n","export class Product {\n    id!: number;\n    sku!: string;\n    name!: string;\n    description!: string;\n    unitPrice!: number;\n    imageUrl!: string;\n    active!: boolean;\n    unitsInStock!: number;\n    dateCreated!: Date;\n    lastUpdated!: Date;\n}\n","import { CartItem } from './cart-item';\n\nexport class OrderItem {\n  imageUrl: string;\n  unitPrice: number;\n  quantity: number;\n  productId: number;\n\n  constructor(cartItem: CartItem) {\n    this.imageUrl = cartItem.imageUrl;\n    this.unitPrice = cartItem.unitPrice;\n    this.quantity = cartItem.quantity;\n    this.productId = cartItem.id;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { CartService } from 'src/app/services/cart.service';\n\n@Component({\n  selector: 'app-cart-status',\n  templateUrl: './cart-status.component.html',\n  styleUrls: ['./cart-status.component.css']\n})\nexport class CartStatusComponent implements OnInit {\n\n  totalPrice: number = 0.00;\n  totalQuantity: number = 0;\n\n  constructor(private cartService: CartService) { }\n\n  ngOnInit(): void {\n    this.updateCartStatus();\n  }\n\n  updateCartStatus() {\n    this.cartService.totalPrice.subscribe(data => this.totalPrice = data);\n    this.cartService.totalQuantity.subscribe(data => this.totalQuantity = data);\n  }\n\n}\n","<div class=\"cart-area d-n\">\n  <a routerLink=\"/cart-details\">\n    <div class=\"total\">\n      {{ totalPrice | currency: \"USD\" }} <span> {{ totalQuantity }}</span>\n    </div>\n    <i class=\"fa fa-shopping-cart\" aria-hidden=\"true\"></i>\n  </a>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { ProductListComponent } from './components/product-list/product-list.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ProductService } from './services/product.service';\n\nimport { Routes, RouterModule } from '@angular/router';\nimport { ProductCategoryMenuComponent } from './components/product-category-menu/product-category-menu.component';\nimport { SearchComponent } from './components/search/search.component';\nimport { ProductDetailsComponent } from './components/product-details/product-details.component';\n\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartStatusComponent } from './components/cart-status/cart-status.component';\nimport { CartDetailsComponent } from './components/cart-details/cart-details.component';\nimport { CheckoutComponent } from './components/checkout/checkout.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { LoginStatusComponent } from './components/login-status/login-status.component';\nimport { httpInterceptorProviders } from './http-interceptors';\nimport { OrdersComponent } from './components/orders/orders.component';\nimport { AuthGuard } from './guards/auth.guard';\nimport { SuccessComponent } from './components/success/success.component';\nimport { CanceledComponent } from './components/canceled/canceled.component';\n\nconst routes: Routes = [\n  { path: 'orders', component: OrdersComponent, canActivate: [AuthGuard] },\n  { path: 'checkout', component: CheckoutComponent },\n  { path: 'canceled', component: CanceledComponent },\n  { path: 'success', component: SuccessComponent },\n  { path: 'cart-details', component: CartDetailsComponent },\n  { path: 'products/:id', component: ProductDetailsComponent },\n  { path: 'search/:keyword', component: ProductListComponent },\n  { path: 'category/:id', component: ProductListComponent },\n  { path: 'category', component: ProductListComponent },\n  { path: '', redirectTo: '/category/1', pathMatch: 'full' },\n  { path: '**', redirectTo: '/category/1', pathMatch: 'full' },\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ProductListComponent,\n    ProductCategoryMenuComponent,\n    SearchComponent,\n    ProductDetailsComponent,\n    CartStatusComponent,\n    CartDetailsComponent,\n    CheckoutComponent,\n    LoginStatusComponent,\n    OrdersComponent,\n    SuccessComponent,\n    CanceledComponent,\n  ],\n  imports: [\n    RouterModule.forRoot(routes, { useHash: true }),\n    BrowserModule,\n    HttpClientModule,\n    NgbModule,\n    ReactiveFormsModule,\n  ],\n  providers: [ProductService, AuthGuard, httpInterceptorProviders],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","<div class=\"menu-sidebar-content js-scrollbar1\">\n  <nav class=\"navbar-sidebar\">\n    <ul class=\"list-unstyled navbar-list\">\n      <li *ngFor=\"let category of productCategories\">\n        <a routerLink=\"category/{{ category.id }}\" routerLinkActive=\"active\">{{\n          category.categoryName\n        }}</a>\n      </li>\n    </ul>\n  </nav>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ProductCategory } from 'src/app/common/product-category';\nimport { ProductService } from 'src/app/services/product.service';\n\n@Component({\n  selector: 'app-product-category-menu',\n  templateUrl: './product-category-menu.component.html',\n  styleUrls: ['./product-category-menu.component.css']\n})\nexport class ProductCategoryMenuComponent implements OnInit {\n\n  productCategories!: ProductCategory[];\n\n  constructor(private productService: ProductService) { }\n\n  ngOnInit(): void {\n    this.listProductCategories();\n  }\n\n  listProductCategories() {\n    this.productService.getProductCategories().subscribe(response => {\n      this.productCategories = response._embedded.productCategory;\n    });\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { CartItem } from 'src/app/common/cart-item';\nimport { Product } from 'src/app/common/product';\nimport { CartService } from 'src/app/services/cart.service';\nimport { ProductService } from 'src/app/services/product.service';\n\n@Component({\n  selector: 'app-product-details',\n  templateUrl: './product-details.component.html',\n  styleUrls: ['./product-details.component.css']\n})\nexport class ProductDetailsComponent implements OnInit {\n\n  product: Product = new Product();\n\n  constructor(private productService: ProductService,\n              private cartService: CartService,\n              private location: Location,\n              private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.route.paramMap.subscribe(() => {\n      this.handleProductDetails();\n    });\n  }\n\n  handleProductDetails() {\n    let value: string|null = this.route.snapshot.paramMap.get(\"id\");\n    let id: number = 1;\n    if (value !== null) {\n      id = +value;\n    }\n\n    this.productService.getProduct(id).subscribe(product => {\n      this.product = product;\n    })\n  }\n\n  addToCart() {\n    const cartItem: CartItem = new CartItem(this.product);\n    this.cartService.addToCart(cartItem);\n  }\n\n  back() {\n    this.location.back();\n  }\n}\n","<div class=\"main-content\">\n  <div class=\"section-content section-content-p30\">\n    <div class=\"container-fluid\">\n      <div class=\"row\">\n        <div>\n          <img\n            src=\"{{ product.imageUrl }}\"\n            class=\"img-responsive\"\n            width=\"200px\"\n          />\n\n          <h3>{{ product.name }}</h3>\n          <div class=\"price\">{{ product.unitPrice | currency: \"USD\" }}</div>\n          <button (click)=\"addToCart()\" class=\"primary-btn\">Add to cart</button>\n\n          <h4 class=\"mt-5 mb-3\">Product Description</h4>\n          <p class=\"w-50\">\n            {{ product.description }}\n          </p>\n\n          <button (click)=\"back()\" class=\"btn btn-link\">Go Back</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { CartItem } from 'src/app/common/cart-item';\nimport { Product } from 'src/app/common/product';\nimport { CartService } from 'src/app/services/cart.service';\nimport {\n  ProductService,\n  GetResponseProducts,\n} from 'src/app/services/product.service';\n\n@Component({\n  selector: 'app-product-list',\n  templateUrl: './product-list.component.html',\n  styleUrls: ['./product-list.component.css'],\n})\nexport class ProductListComponent implements OnInit {\n  products: Product[] = [];\n  currentCategoryId: number = 1;\n  previousCategoryId: number = 1;\n  searchMode: boolean = false;\n  pageNumber: number = 1;\n  pageSize: number = 10;\n  totalElements: number = 0;\n  prevousKeyword: string | null = null;\n  loading: boolean = false;\n\n  constructor(\n    private productService: ProductService,\n    private cartService: CartService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.route.paramMap.subscribe(() => {\n      this.listProducts();\n    });\n  }\n\n  listProducts() {\n    this.searchMode = this.route.snapshot.paramMap.has('keyword');\n\n    if (this.searchMode) {\n      this.handleSearchProducts();\n    } else {\n      this.handleListProducts();\n    }\n  }\n\n  handleSearchProducts() {\n    const keyword: string | null = this.route.snapshot.paramMap.get('keyword');\n\n    if (keyword != null) {\n      if (this.prevousKeyword !== keyword) {\n        this.pageNumber = 1;\n      }\n\n      this.prevousKeyword = keyword;\n\n      this.productService\n        .searchProductPaginate(this.pageNumber - 1, this.pageSize, keyword)\n        .subscribe((response) => {\n          this.processResult(response);\n          this.loading = false;\n        });\n    }\n  }\n\n  handleListProducts() {\n    // check if id param is available\n    const hasCategoryId: boolean = this.route.snapshot.paramMap.has('id');\n    const id = this.route.snapshot.paramMap.get('id');\n\n    if (hasCategoryId && id != null) {\n      this.currentCategoryId = +id;\n    } else {\n      this.currentCategoryId = 1;\n    }\n\n    if (this.previousCategoryId !== this.currentCategoryId) {\n      this.pageNumber = 1;\n    }\n\n    this.previousCategoryId = this.currentCategoryId;\n\n    this.productService\n      .getProductListPaginate(\n        this.pageNumber - 1,\n        this.pageSize,\n        this.currentCategoryId\n      )\n      .subscribe((response) => {\n        this.processResult(response);\n        this.loading = false;\n      });\n  }\n\n  processResult(response: GetResponseProducts) {\n    this.products = response._embedded.products;\n    this.pageNumber = response.page.number + 1;\n    this.pageSize = response.page.size;\n    this.totalElements = response.page.totalElements;\n  }\n\n  updatePageSize(target: EventTarget | null) {\n    if (target !== null) {\n      const size: number = +(target as HTMLInputElement).value;\n      this.pageSize = size;\n      this.pageNumber = 1;\n      this.listProducts();\n    }\n  }\n\n  addToCart(product: Product) {\n    const cartItem: CartItem = new CartItem(product);\n    this.cartService.addToCart(cartItem);\n  }\n}\n","<div class=\"main-content\">\n  <div class=\"section-content section-content-p30\">\n    <div class=\"container-fluid\">\n      <div class=\"row\">\n        <div *ngFor=\"let product of products\" class=\"col-md-3\">\n          <div class=\"product-box\">\n            <a routerLink=\"/products/{{ product.id }}\">\n              <img\n                src=\"{{ product.imageUrl }}\"\n                alt=\"Product Image\"\n                class=\"img-responsive\"\n              />\n            </a>\n            <a routerLink=\"/products/{{ product.id }}\">\n              <h1>{{ product.name }}</h1>\n            </a>\n            <div class=\"price\">{{ product.unitPrice | currency: \"USD\" }}</div>\n            <button (click)=\"addToCart(product)\" class=\"primary-btn\">\n              Add to cart\n            </button>\n          </div>\n        </div>\n\n        <div\n          *ngIf=\"products?.length === 0\"\n          class=\"alert alert-warning col-md-12\"\n          role=\"alert\"\n        >\n          <h3 *ngIf=\"!loading\">No Products Found</h3>\n          <h3 *ngIf=\"loading\">Loading Products</h3>\n        </div>\n      </div>\n\n      <div class=\"footer-pagination\">\n        <div class=\"row\">\n          <div class=\"col-md-6\"></div>\n\n          <div class=\"col-md-6\">\n            <div class=\"row\">\n              <div>\n                <ngb-pagination\n                  [(page)]=\"pageNumber\"\n                  [pageSize]=\"pageSize\"\n                  [collectionSize]=\"totalElements\"\n                  [maxSize]=\"5\"\n                  (pageChange)=\"listProducts()\"\n                >\n                </ngb-pagination>\n              </div>\n              <div>\n                <div class=\"items d-flex flex-column ml-5\">\n                  <select\n                    id=\"itemsPerPage\"\n                    (change)=\"updatePageSize($event.target)\"\n                  >\n                    <option value=\"10\" selected>10</option>\n                    <option value=\"20\">20</option>\n                    <option value=\"30\">30</option>\n                    <option value=\"40\">40</option>\n                  </select>\n                  <label for=\"itemsPerPage\">Items per page</label>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { CartItem } from '../common/cart-item';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartService {\n  cartItems: CartItem[] = [];\n  totalPrice: BehaviorSubject<number> = new BehaviorSubject<number>(0);\n  totalQuantity: BehaviorSubject<number> = new BehaviorSubject<number>(0);\n  storage: Storage = localStorage;\n  private static EXPIRY_TIME: number = 60 * 60 * 24 * 1000;\n\n  constructor() {\n    const cartItems = this.getCartItemsWithExpiry('cartItems');\n    if (cartItems != null) {\n      this.cartItems = cartItems;\n      this.computeCartTotals();\n    }\n  }\n\n  persistCartItemsWithExpiry(ttl: number) {\n    const now = new Date();\n\n    const item = {\n      value: this.cartItems,\n      expiry: now.getTime() + ttl,\n    };\n    this.storage.setItem('cartItems', JSON.stringify(item));\n  }\n\n  getCartItemsWithExpiry(key: string) {\n    const itemStr = localStorage.getItem(key);\n\n    if (!itemStr) {\n      return null;\n    }\n    const item = JSON.parse(itemStr);\n    const now = new Date();\n\n    if (now.getTime() > item.expiry) {\n      localStorage.removeItem(key);\n      return null;\n    }\n\n    return item.value;\n  }\n\n  resetCart() {\n    this.cartItems = [];\n    this.totalPrice.next(0);\n    this.totalQuantity.next(0);\n    this.storage.removeItem('cartItems');\n  }\n\n  addToCart(cartItem: CartItem) {\n    let alreadyExistInCart: boolean = false;\n    let existingCartItem: CartItem | undefined = undefined;\n\n    if (this.cartItems.length > 0) {\n      existingCartItem = this.cartItems.find((item) => item.id === cartItem.id);\n\n      alreadyExistInCart = existingCartItem !== undefined;\n    }\n\n    if (alreadyExistInCart) {\n      ++existingCartItem!.quantity;\n    } else {\n      this.cartItems.push(cartItem);\n    }\n\n    this.computeCartTotals();\n  }\n\n  computeCartTotals() {\n    let totalPriceValue: number = 0;\n    let totalQuantityValue: number = 0;\n\n    for (let cartItem of this.cartItems) {\n      totalPriceValue += cartItem.quantity * cartItem.unitPrice;\n      totalQuantityValue += cartItem.quantity;\n    }\n\n    this.totalPrice.next(totalPriceValue);\n    this.totalQuantity.next(totalQuantityValue);\n    this.persistCartItemsWithExpiry(CartService.EXPIRY_TIME);\n  }\n\n  logCartDetails(totalPriceValue: number, totalQuantityValue: number) {\n    console.log('Contents of Cart');\n\n    for (let cartItem of this.cartItems) {\n      const subTotal: number = cartItem.quantity * cartItem.unitPrice;\n      console.log(\n        `name: ${cartItem.name} quantity: ${cartItem.quantity} unitPrice: ${cartItem.unitPrice} subTotal: ${subTotal}`\n      );\n      console.log('-------------------------');\n    }\n\n    console.log(\n      `totalPrice: ${totalPriceValue.toFixed(\n        2\n      )} totalQuantity: ${totalQuantityValue}`\n    );\n  }\n\n  decrementQuantity(cartItem: CartItem) {\n    --cartItem.quantity;\n\n    if (cartItem.quantity === 0) {\n      this.remove(cartItem);\n    } else {\n      this.computeCartTotals();\n    }\n  }\n\n  remove(cartItem: CartItem) {\n    const index: number = this.cartItems.findIndex(\n      (currCartItem) => currCartItem.id === cartItem.id\n    );\n\n    if (index > -1) {\n      this.cartItems.splice(index, 1);\n      this.computeCartTotals();\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { CartService } from 'src/app/services/cart.service';\n\n@Component({\n  selector: 'app-success',\n  templateUrl: './success.component.html',\n  styleUrls: ['./success.component.css'],\n})\nexport class SuccessComponent implements OnInit {\n  constructor(private cartService: CartService) {}\n\n  ngOnInit(): void {\n    this.cartService.resetCart();\n  }\n}\n","<div class=\"main-content\">\n  <div class=\"text-center mt-5\">\n    <h1 class=\"text-success\">\n      Your order has been place and will be shipped soon!\n    </h1>\n    <h1 class=\"text-success\">Thank You!</h1>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { BehaviorSubject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { Purchase } from '../common/purchase';\nimport { CheckoutService } from './checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StripeService {\n  private stripePromise = loadStripe(environment.STRIPE_KEY);\n  loading: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  constructor(private checkoutService: CheckoutService) {}\n\n  checkout(purchase: Purchase, url: string) {\n    this.loading.next(true);\n    this.checkoutService.createCheckOutSession(purchase, url).subscribe({\n      next: (session) => {\n        this.redirectToStripe(session);\n      },\n      error: (error) => {\n        alert(`There was an error: ${error.error.message}`);\n        this.loading.next(false);\n      },\n    });\n  }\n\n  private async redirectToStripe(session: any) {\n    const stripe = await this.stripePromise;\n\n    if (stripe != null) {\n      let result = await stripe.redirectToCheckout({\n        sessionId: session.id,\n      });\n\n      this.loading.next(false);\n\n      if (result.error) {\n        alert(result.error.message);\n      }\n    } else {\n      alert('A error happen! Please try agian later.');\n      this.loading.next(false);\n    }\n  }\n}\n","export class Token {\n    access: string;\n    expiresAt: number;\n    expiresIn: number;\n    refresh: string;\n    type: string;\n\n    constructor(access:string, expiresAt:number, expiresIn:number, refresh:string, type:string) {\n        this.access = access;\n        this.expiresAt = expiresAt;\n        this.expiresIn = expiresIn;\n        this.refresh = refresh;\n        this.type = type;\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n//@ts-ignore\nimport netlifyIdentity from 'netlify-identity-widget';\nimport { User } from 'src/app/common/user';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-login-status',\n  templateUrl: './login-status.component.html',\n  styleUrls: ['./login-status.component.css'],\n})\nexport class LoginStatusComponent implements OnInit {\n  isAuthenticated: boolean = false;\n  user!: User | null;\n\n  constructor(private authService: AuthService, private router: Router) {}\n\n  ngOnInit() {\n    this.subscrbieToAuthValues();\n\n    netlifyIdentity.on('login', (user: any) => {\n      this.handleUser(user);\n      netlifyIdentity.close();\n    });\n\n    netlifyIdentity.on('logout', () => {\n      this.authService.setUser(null);\n      this.authService.setIsAuthenticated(false);\n      if (location.pathname == '/orders') {\n        this.router.navigateByUrl('/');\n      }\n    });\n\n    netlifyIdentity.on('init', (user: any) => {\n      this.handleUser(user);\n    });\n\n    netlifyIdentity.init();\n  }\n\n  handleUser(user: any) {\n    if (user === null) {\n      this.authService.setUser(null);\n      this.authService.setIsAuthenticated(false);\n    } else {\n      this.authService.setUser(user);\n      this.authService.setIsAuthenticated(true);\n    }\n  }\n\n  subscrbieToAuthValues() {\n    this.authService.isAuthenticated.subscribe((auth) => {\n      this.isAuthenticated = auth;\n    });\n\n    this.authService.user.subscribe((user) => {\n      this.user = user;\n    });\n  }\n\n  login() {\n    netlifyIdentity.open();\n  }\n\n  logout() {\n    netlifyIdentity.logout();\n  }\n}\n","<div class=\"login-status-header\">\n  <div\n    *ngIf=\"isAuthenticated && user\"\n    class=\"login-status-user-info text-white\"\n  >\n    Welcome back {{ user.name }}\n  </div>\n\n  <button\n    *ngIf=\"!isAuthenticated\"\n    class=\"security-btn\"\n    type=\"button\"\n    (click)=\"login()\"\n  >\n    Login / Sign Up\n  </button>\n\n  <button\n    (click)=\"logout()\"\n    *ngIf=\"isAuthenticated\"\n    class=\"security-btn\"\n    type=\"button\"\n  >\n    Logout\n  </button>\n\n  <button\n    *ngIf=\"isAuthenticated\"\n    routerLink=\"/orders\"\n    class=\"security-btn ml-5\"\n    type=\"button\"\n  >\n    Orders\n  </button>\n</div>\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Token } from '../common/token';\nimport { User } from '../common/user';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  authToken: string | null = null;\n  isAuthenticated: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(\n    false\n  );\n  user: BehaviorSubject<User | null> = new BehaviorSubject<User | null>(null);\n\n  constructor() {}\n\n  setAuthToken(user: User | null) {\n    if (user != null) {\n      this.authToken = 'Bearer ' + user.token.access;\n    }\n  }\n\n  setUser(user: any) {\n    if (user === null) {\n      this.user.next(null);\n      this.authToken = null;\n    } else {\n      const theUser = this.createUser(user);\n      this.user.next(theUser);\n      this.setAuthToken(theUser);\n    }\n  }\n\n  setIsAuthenticated(state: boolean) {\n    this.isAuthenticated.next(state);\n  }\n\n  createUser(user: any): User {\n    const id: string = user.id;\n    const email: string = user.email;\n    const name: string = user.user_metadata.full_name;\n    const accessToken: string = user.token.access_token;\n    const refreshToken: string = user.token.refresh_token;\n    const tokenType: string = user.token.token_type;\n    const expiresAt: number = user.token.expires_at;\n    const expiresIn: number = user.token.expires_in;\n    const token: Token = new Token(\n      accessToken,\n      expiresAt,\n      expiresIn,\n      refreshToken,\n      tokenType\n    );\n    return new User(id, email, name, token);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-canceled',\n  templateUrl: './canceled.component.html',\n  styleUrls: ['./canceled.component.css']\n})\nexport class CanceledComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"main-content\">\n  <div class=\"text-center mt-5\">\n    <h1 class=\"text-danger\">You order was canceled!</h1>\n    <h3 class=\"text-muted\">If this was a mistake, then checkout again.</h3>\n  </div>\n</div>\n","<div class=\"main-content\">\n  <div class=\"section-content section-content-p30\">\n    <div class=\"container-fluid\">\n      <h3>Your Orders</h3>\n\n      <div *ngIf=\"orders.length > 0\">\n        <table class=\"table table-bordered\">\n          <tr>\n            <th width=\"20%\">Order Tracking Number</th>\n            <th width=\"10%\">Total Price</th>\n            <th width=\"10%\">Total Quantity</th>\n            <th width=\"10%\">Date</th>\n          </tr>\n\n          <tr *ngFor=\"let order of orders\">\n            <td>{{ order.orderTrackingNumber }}</td>\n            <td>{{ order.totalPrice | currency: \"USD\" }}</td>\n            <td>{{ order.totalQuantity }}</td>\n            <td>{{ order.dateCreated | date: \"medium\" }}</td>\n          </tr>\n        </table>\n      </div>\n\n      <div *ngIf=\"loading\" class=\"alert alert-warning col-md-12\" role=\"alert\">\n        <h3>Loading orders. Please wait...</h3>\n      </div>\n\n      <div\n        *ngIf=\"orders.length == 0 && errorMsg.length == 0 && !loading\"\n        class=\"alert alert-warning col-md-12\"\n        role=\"alert\"\n      >\n        <h3>No orders found.</h3>\n      </div>\n\n      <div\n        *ngIf=\"orders.length == 0 && errorMsg.length > 0 && !loading\"\n        class=\"alert alert-danger col-md-12\"\n        role=\"alert\"\n      >\n        <h3>{{ errorMsg }}</h3>\n        <p>Log out and log back in if your browser has been idle for awhile.</p>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { OrderHistory } from 'src/app/common/order-history';\nimport { OrderHistoryService } from 'src/app/services/order-history.service';\n\n@Component({\n  selector: 'app-orders',\n  templateUrl: './orders.component.html',\n  styleUrls: ['./orders.component.css']\n})\nexport class OrdersComponent implements OnInit {\n\n  orders: Array<OrderHistory> = [];\n  storage: Storage = sessionStorage;\n  errorMsg: string = \"\";\n  loading:boolean = false;\n  \n\n  constructor(private orderHistoryService:OrderHistoryService) { }\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.handleOrderHistory();\n    this.orderHistoryService.errorMsg.subscribe(errMessage => {\n      this.errorMsg = errMessage;\n      this.loading = false;\n    })\n  }\n\n  handleOrderHistory() {\n    this.orderHistoryService.getOrderHistory().subscribe(orders => {\n      this.orders = orders;\n      this.loading = false;\n    })\n  }\n\n}\n","import {\n  AbstractControl,\n  FormControl,\n  ValidationErrors,\n  ValidatorFn,\n} from '@angular/forms';\n\nexport class Luv2ShopValidators {\n  static notOnlyWhitespace(control: FormControl): ValidationErrors | null {\n    if (typeof control.value === 'string') {\n      if (control.value && control.value.trim().length == 0) {\n        return { notOnlyWhitespace: true };\n      }\n    } else {\n      if (control.value === null) {\n        return { notOnlyWhitespace: true };\n      }\n    }\n\n    return null;\n  }\n\n  static notOnlyWhitespaceWithOneLetter(\n    control: FormControl\n  ): ValidationErrors | null {\n    if (!control.value) return null;\n\n    if (control.value.trim().length === 1) {\n      return { notOnlyWhitespaceWithOneLetter: true };\n    }\n\n    return null;\n  }\n\n  static notOnlyWhitespaceMultipleCharacters(max: number): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      if (control.value.trim().length !== max) {\n        return { notOnlyWhitespaceMultipleCharacters: true };\n      }\n\n      return null;\n    };\n  }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}